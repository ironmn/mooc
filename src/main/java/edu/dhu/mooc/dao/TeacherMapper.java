package edu.dhu.mooc.dao;

import edu.dhu.mooc.entity.Student;
import edu.dhu.mooc.entity.teacher.Teacher;
import edu.dhu.mooc.entity.teacher.TeacherCourse;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface TeacherMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher
     *
     * @mbg.generated Sun Mar 14 16:18:31 CST 2021
     */
    int deleteByPrimaryKey(String t_id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher
     *
     * @mbg.generated Sun Mar 14 16:18:31 CST 2021
     */
    int insert(Teacher record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher
     *
     * @mbg.generated Sun Mar 14 16:18:31 CST 2021
     */
    int insertSelective(Teacher record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher
     *
     * @mbg.generated Sun Mar 14 16:18:31 CST 2021
     */
    Teacher selectByPrimaryKey(String t_id);

    //自定义方法
    List<Teacher> selectByAccount(@Param("phone")String phone_num, @Param("password")String pwd);
    //返回所有的老师列表
    List<Teacher> selectAll();
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher
     *
     * @mbg.generated Sun Mar 14 16:18:31 CST 2021
     */
    int updateByPrimaryKeySelective(Teacher record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher
     *
     * @mbg.generated Sun Mar 14 16:18:31 CST 2021
     */
    int updateByPrimaryKey(Teacher record);

    /**
     * SQL (本项目中最复杂)
     *     SELECT
     *       course.c_id AS c_id,
     *       course.c_name AS c_name,
     *       c_count
     *     FROM
     *       course,
     *       (SELECT c_id, COUNT(*) AS c_count FROM sc GROUP BY c_id) c_cnt
     *     WHERE
     *       course.`c_id` = c_cnt.`c_id` AND
     *       course.`t_id` = #{t_id}
     * 查询t_id对应的老师上的所有课程
     * @param t_id
     * @return
     */
    List<TeacherCourse> findMyTeachCourse(@Param("t_id") String t_id);

    /**
     * SQL
     *
     * @param c_id 课程id
     * @return 学生对象的List集合
     *
     */
    List<Student> getStudentListByCourseId(@Param("c_id") String c_id);
}